Here's a step-by-step guide to best practices for collaboration using GitHub, formatted with commands:

1.Fork the Repository
Go to the repository on GitHub.
Click the Fork button at the top-right to create your copy of the repository under your account.
Clone the Forked Repository Locally
Command:git clone  <your_fork_url>

2.Set the Remote to Your Fork
By default, origin points to your fork after cloning. Confirm this:
`git remote -v`

3.Add Upstream Remote for Syncing with the Original Repository
`git remote add upstream <original_repository_url>`


4.Create a Local Branch for Your Work
Keep the main branch clean by creating a new branch for your feature or fix.
`git branch <feature_branch_name>`
`git switch <feature_branch_name>`

5.Make Changes and Commit
Save your changes and commit with a descriptive message.
`git add .`
`git commit -m "Add: <description_of_change>"`

6.Sync with Upstream Regularly
Avoid merge conflicts by syncing your branch with the upstream repository.
`git fetch upstream`
`git merge upstream/main`

7.Push Your Changes to Your Fork
Push your branch to your GitHub fork.
`git push origin <feature_branch_name>`

8.Create a Pull Request (PR)
Go to the original repository and create a PR for your branch. Include:

Title: Summarize the change.
Description: Detail the purpose, scope, and any dependencies.
Participate in Code Review

9.Address comments or suggestions provided by reviewers. Update your PR:
`git add .
git commit --amend
git push origin <feature_branch_name> --force`

10.Merge Your Changes
Once approved, merge your PR. Ensure the commit history is clean (use "Squash and Merge" if needed).

11.Delete the Branch
Clean up your branches after the PR is merged.
`git branch -d <feature_branch_name>
git push origin --delete <feature_branch_name>`